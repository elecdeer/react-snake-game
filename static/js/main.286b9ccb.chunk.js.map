{"version":3,"sources":["Square.tsx","Board.tsx","App.tsx","useUpdater.ts","serviceWorker.ts","index.tsx"],"names":["Square","index","innerClass","type","facing","useRecoilValue","facingState","game","gameState","content","SquareState","SnakeHead","divStyle","transform","f","Facing","Top","Bottom","Right","Left","getDeg","eyeIcon","className","style","Board","i","boardMap","boardState","board","y","boardHeight","row","x","boardWidth","push","key","coordToIndex","posToIndex","pos","Empty","SnakeBody","Feed","Wall","dx","dy","text","atom","default","initialBoardState","size","arr","Array","fill","length","lengthState","snakeBodyState","Math","round","feedPosState","App","useRecoilState","setFacing","snakeLength","setSnakeLength","snakeBody","setSnakeBody","headPos","feedPos","setFeedPos","setBoard","setGameState","getRandomInt","min","max","ceil","floor","random","spawnFeed","console","log","trySetFacing","facingTo","useEffect","currBoard","nextBoard","slice","forEach","p","useKey","setIntervalMs","callback","initialInterval","useState","intervalMs","savedCallback","useRef","current","timer","setInterval","clearInterval","useUpdater","toX","toY","toState","snakeTail","checkBanned","currVal","leave","concat","goAhead","buttonHandler","resetBoard","resetBoardState","useResetRecoilState","resetLengthState","resetBodyState","onClick","disabled","renderStateDiv","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.286b9ccb.chunk.js","sourcesContent":["import React from 'react';\nimport {Facing, facingState, gameState, SquareState} from \"./App\";\nimport {useRecoilValue} from \"recoil\";\n\ntype Props = {\n\tindex: number;\n\ttype: SquareState\n}\n\nconst Square : React.FC<Props> = ({index, type}) => {\n\tconst innerClass = type;\n\n\tconst facing = useRecoilValue(facingState);\n\tconst game = useRecoilValue(gameState);\n\n\tlet content = <></>;\n\tif(innerClass === SquareState.SnakeHead){\n\n\t\tconst getDeg = (f: Facing) => {\n\t\t\tswitch(facing){\n\t\t\t\tcase Facing.Top: return -90;\n\t\t\t\tcase Facing.Bottom: return 90;\n\t\t\t\tcase Facing.Right: return 0;\n\t\t\t\tcase Facing.Left: return 180;\n\t\t\t}\n\t\t}\n\n\t\tconst divStyle = {\n\t\t\ttransform: `rotate(${getDeg(facing)}deg)`\n\t\t}\n\n\t\tlet eyeIcon = \"：\"\n\t\tif(game === \"GameOver\"){\n\t\t\teyeIcon = \"X\"\n\t\t}\n\n\t\tcontent = <div className=\"snake-eye\" style={divStyle}>\n\t\t\t{eyeIcon}\n\t\t</div>\n\t}\n\n\treturn (\n\t\t<div className=\"square\">\n\t\t\t<div className={innerClass + \" square-inner\"}>\n\t\t\t\t{content}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Square;","import React from 'react';\nimport Square from \"./Square\";\nimport {useRecoilValue} from \"recoil\";\nimport {boardHeight, boardState, boardWidth} from \"./App\";\n\nconst Board = () => {\n\tconst boardMap = useRecoilValue(boardState);\n\n\tconst renderSquare = (i: number) => {\n\t\treturn <Square index={i} key={i} type={boardMap[i]}/>;\n\t}\n\n\tconst board = [];\n\tfor(let y = 0; y < boardHeight; y++){\n\t\tconst row = [];\n\t\tfor(let x = 0; x < boardWidth; x++){\n\t\t\tconst index = y * boardWidth + x;\n\t\t\trow.push(renderSquare(index));\n\t\t}\n\t\tboard.push(\n\t\t\t<div className=\"board-row\" key={y}>\n\t\t\t\t{row}\n\t\t\t</div>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{board}\n\t\t</div>\n\t);\n};\n\nexport default Board;","import React, {useEffect} from 'react';\nimport './App.scss';\nimport Board from \"./Board\";\nimport {atom, useRecoilState, useResetRecoilState} from \"recoil\";\nimport {useKey} from \"react-use\";\nimport {useUpdater} from \"./useUpdater\";\n\nexport const boardWidth = 12;\nexport const boardHeight = 12;\n\nconst coordToIndex = (x: number, y: number) => y * boardWidth + x;\nconst posToIndex = (pos: Pos) => pos.y * boardWidth + pos.x;\n\nexport const SquareState = {\n  Empty: \"empty\",\n  SnakeHead: \"snake-head\",\n  SnakeBody: \"snake-body\",\n  Feed: \"feed\",\n  Wall: \"wall\",\n}\nexport type SquareState = typeof SquareState[keyof typeof SquareState];\n\n\ntype Pos = {\n  x: number,\n  y: number\n}\n\nexport const Facing = {\n  Top: {dx: 0, dy: -1, text:\"↑\"},\n  Bottom: {dx: 0, dy: 1, text:\"↓\"},\n  Right: {dx: 1, dy: 0, text:\"→\"},\n  Left: {dx: -1, dy: 0, text:\"←\"},\n}\nexport type Facing = typeof Facing[keyof typeof Facing];\n\n\nexport type GameState = \"WaitStart\" | \"Playing\" | \"GameOver\"\n\n\nexport const facingState = atom<Facing>({\n  key: \"snakeFacing\",\n  default: Facing.Top\n})\n\n\nconst initialBoardState: SquareState[] = (() => {\n  const size = boardWidth * boardHeight;\n  const arr = new Array(size).fill(SquareState.Empty);\n\n  for(let i = 0; i < arr.length; i++){\n    if(i < boardWidth || size - boardWidth < i || i%boardHeight === 0 || i%boardHeight === boardWidth-1){\n      arr[i] = SquareState.Wall;\n    }\n  }\n  return arr;\n})();\n\nexport const boardState = atom<SquareState[]>({\n  key: \"boardState\",\n  default: initialBoardState\n})\n\nexport const lengthState = atom<number>({\n  key: \"lengthState\",\n  default: 4,\n})\n\nexport const snakeBodyState = atom<Pos[]>({\n  key: \"snakeBodyState\",\n  default: [{\n    x: Math.round(boardWidth/2), y: Math.round(boardHeight/2)\n  }]\n})\n\nexport const feedPosState = atom<Pos>({\n  key: \"feedPosState\",\n  default: {\n    x: 1,\n    y: 1\n  }\n})\n\nexport const gameState = atom<GameState>({\n  key: \"gameState\",\n  default: \"WaitStart\"\n})\n\n\n\n\nfunction App() {\n  const [facing, setFacing] = useRecoilState(facingState);\n  const [snakeLength, setSnakeLength] = useRecoilState(lengthState);\n  const [snakeBody, setSnakeBody] = useRecoilState(snakeBodyState);\n  const headPos = snakeBody[0];\n\n  const [feedPos, setFeedPos] = useRecoilState(feedPosState);\n\n  const [board, setBoard] = useRecoilState(boardState);\n  const [game, setGameState] = useRecoilState(gameState);\n\n\n  const getRandomInt = (min: number, max: number) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n\n  const spawnFeed = () => {\n    while(true){\n      const x = getRandomInt(1, boardWidth - 2);\n      const y = getRandomInt(1, boardHeight - 2);\n      console.log(\"try\", x, y);\n      const index = coordToIndex(x, y);\n      console.log(board[index]);\n      if(board[index] === SquareState.Empty){\n        setFeedPos({x, y});\n        break;\n      }\n    }\n  }\n\n\n\n  const goAhead = () => {\n    const toX = headPos.x + facing.dx;\n    const toY = headPos.y + facing.dy;\n\n    const toState = board[coordToIndex(toX, toY)];\n\n    const checkBanned = () => {\n      if(toState === SquareState.Wall) return true;\n\n      //次進むのがしっぽの位置でない\n      const snakeTail = snakeBody[snakeBody.length - 1];\n      if(toState === SquareState.SnakeBody && ! (snakeTail.x === toX && snakeTail.y === toY)){\n        return true;\n      }\n      return false;\n    }\n\n    if(checkBanned()){\n      console.log(\"gameover\")\n      setGameState(\"GameOver\");\n      return;\n    }\n\n    if(toState === SquareState.Feed){\n      setSnakeLength(currVal => currVal + 1);\n      spawnFeed();\n    }\n\n    const pos: Pos = {x: toX, y: toY}\n\n    const pushed = [pos].concat(snakeBody);\n    const leave = pushed.slice(0, snakeLength);\n    // const del = pushed.slice(snakeLength);\n\n    setSnakeBody(leave);\n\n    console.log(leave);\n\n  }\n\n  const trySetFacing = (facingTo: Facing) => {\n    if(facing.dx !== 0 && facing.dx === -facingTo.dx){\n      return;\n    }\n    if(facing.dy !== 0 && facing.dy === -facingTo.dy){\n      return;\n    }\n    setFacing(facingTo);\n  }\n\n\n  useEffect(() => {\n    setBoard(currBoard => {\n      const nextBoard = initialBoardState.slice();\n\n      snakeBody.slice(1).forEach(p => {\n        nextBoard[posToIndex(p)] = SquareState.SnakeBody;\n      })\n      nextBoard[posToIndex(snakeBody[0])] = SquareState.SnakeHead;\n\n      nextBoard[posToIndex(feedPos)] = SquareState.Feed;\n\n      return nextBoard;\n    });\n  }, [feedPos, headPos, snakeBody, setBoard])\n\n\n  useKey(\"s\", () => {\n    trySetFacing(Facing.Bottom);\n  }, {}, [headPos]);\n  useKey(\"w\", () => {\n    trySetFacing(Facing.Top);\n  }, {}, [headPos]);\n  useKey(\"a\", () => {\n    trySetFacing(Facing.Left);\n  }, {}, [headPos]);\n  useKey(\"d\", () => {\n    trySetFacing(Facing.Right);\n  }, {}, [headPos]);\n\n\n\n\n  const setIntervalMs = useUpdater(() => {\n    console.log(\"update\", game);\n    if(game !== \"Playing\"){\n      return;\n    }\n    goAhead();\n  }, 1000);\n\n  useEffect(() => {\n    setIntervalMs(1000 - snakeLength*30);\n  }, [snakeLength, setIntervalMs])\n\n\n  useKey(\" \", () => {\n    console.log(headPos);\n    console.log(board);\n  }, {}, [headPos, board]);\n\n  const buttonHandler = () => {\n    setGameState(\"Playing\");\n    resetBoard();\n  }\n\n  const resetBoardState = useResetRecoilState(boardState);\n  const resetLengthState = useResetRecoilState(lengthState);\n  const resetBodyState = useResetRecoilState(snakeBodyState);\n\n  const resetBoard = () => {\n    resetBoardState();\n    resetLengthState();\n    resetBodyState();\n    spawnFeed();\n  }\n\n  const renderStateDiv = () => {\n    switch(game){\n      case \"WaitStart\":\n        return <div>\n          <p>Push to Start</p>\n          <button onClick={buttonHandler}>Start</button>\n        </div>\n      case \"Playing\":\n        return <div>\n          <p>Score:{snakeLength}</p>\n          <button onClick={buttonHandler} disabled={true}>Start</button>\n        </div>\n      case \"GameOver\":\n        return <div>\n          <p>GameOver Score:{snakeLength}</p>\n          <button onClick={buttonHandler}>Restart</button>\n        </div>\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Snake Game</h2>\n      <p>WASDで操作</p>\n      {renderStateDiv()}\n      <div className=\"game-board\">\n        <Board/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {useEffect, useRef, useState} from \"react\";\n\n/**\n * interval時間ごとにcallbackを呼び出す\n * @param callback\n * @param initialInterval\n */\nexport const useUpdater = (callback: () => void, initialInterval: number) => {\n\tconst [intervalMs, setIntervalMs] = useState(initialInterval);\n\tconst savedCallback = useRef<Function>(() => {});\n\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t})\n\n\tuseEffect(() => {\n\t\tconst timer = setInterval(() => savedCallback.current(), intervalMs);\n\t\treturn () => clearInterval(timer);\n\t}, [intervalMs]);\n\n\treturn setIntervalMs;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {RecoilRoot} from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}